{
  "console›console-is-a-namespace.any.js›console exists on the global object": "() => {\r\n  assert_true(self.hasOwnProperty(\"console\"));\r\n}",
  "console›console-is-a-namespace.any.js›console has the right property descriptors": "() => {\r\n  const propDesc = Object.getOwnPropertyDescriptor(self, \"console\");\r\n  assert_equals(propDesc.writable, true, \"must be writable\");\r\n  assert_equals(propDesc.enumerable, false, \"must not be enumerable\");\r\n  assert_equals(propDesc.configurable, true, \"must be configurable\");\r\n  assert_equals(propDesc.value, console, \"must have the right value\");\r\n}",
  "console›console-is-a-namespace.any.js›Console (uppercase, as if it were an interface) must not exist": "() => {\r\n  assert_false(\"Console\" in self);\r\n}",
  "console›console-is-a-namespace.any.js›The prototype chain must be correct": "() => {\r\n  const prototype1 = Object.getPrototypeOf(console);\r\n  const prototype2 = Object.getPrototypeOf(prototype1);\r\n\r\n  assert_equals(Object.getOwnPropertyNames(prototype1).length, 0, \"The [[Prototype]] must have no properties\");\r\n  assert_equals(prototype2, Object.prototype, \"The [[Prototype]]'s [[Prototype]] must be %ObjectPrototype%\");\r\n}",
  "console›console-label-conversion.any.js›console.count()'s label gets converted to string via label.toString() when label is an object": "() => {\r\n    let labelToStringCalled = false;\r\n\r\n    console[method]({\r\n      toString() {\r\n        labelToStringCalled = true;\r\n      }\r\n    });\r\n\r\n    assert_true(labelToStringCalled, `${method}() must call toString() on label when label is an object`);\r\n  }",
  "console›console-label-conversion.any.js›console.count() throws exceptions generated by erroneous label.toString() conversion": "() => {\r\n    assert_throws({name: 'Error'}, () => {\r\n      console[method]({\r\n        toString() {\r\n          throw new Error('conversion error');\r\n        }\r\n      });\r\n    }, `${method} must re-throw any exceptions thrown by label.toString() conversion`);\r\n  }",
  "console›console-label-conversion.any.js›console.countReset()'s label gets converted to string via label.toString() when label is an object": "() => {\r\n    let labelToStringCalled = false;\r\n\r\n    console[method]({\r\n      toString() {\r\n        labelToStringCalled = true;\r\n      }\r\n    });\r\n\r\n    assert_true(labelToStringCalled, `${method}() must call toString() on label when label is an object`);\r\n  }",
  "console›console-label-conversion.any.js›console.countReset() throws exceptions generated by erroneous label.toString() conversion": "() => {\r\n    assert_throws({name: 'Error'}, () => {\r\n      console[method]({\r\n        toString() {\r\n          throw new Error('conversion error');\r\n        }\r\n      });\r\n    }, `${method} must re-throw any exceptions thrown by label.toString() conversion`);\r\n  }",
  "console›console-label-conversion.any.js›console.time()'s label gets converted to string via label.toString() when label is an object": "() => {\r\n    let labelToStringCalled = false;\r\n\r\n    console[method]({\r\n      toString() {\r\n        labelToStringCalled = true;\r\n      }\r\n    });\r\n\r\n    assert_true(labelToStringCalled, `${method}() must call toString() on label when label is an object`);\r\n  }",
  "console›console-label-conversion.any.js›console.time() throws exceptions generated by erroneous label.toString() conversion": "() => {\r\n    assert_throws({name: 'Error'}, () => {\r\n      console[method]({\r\n        toString() {\r\n          throw new Error('conversion error');\r\n        }\r\n      });\r\n    }, `${method} must re-throw any exceptions thrown by label.toString() conversion`);\r\n  }",
  "console›console-label-conversion.any.js›console.timeLog()'s label gets converted to string via label.toString() when label is an object": "() => {\r\n    let labelToStringCalled = false;\r\n\r\n    console[method]({\r\n      toString() {\r\n        labelToStringCalled = true;\r\n      }\r\n    });\r\n\r\n    assert_true(labelToStringCalled, `${method}() must call toString() on label when label is an object`);\r\n  }",
  "console›console-label-conversion.any.js›console.timeLog() throws exceptions generated by erroneous label.toString() conversion": "() => {\r\n    assert_throws({name: 'Error'}, () => {\r\n      console[method]({\r\n        toString() {\r\n          throw new Error('conversion error');\r\n        }\r\n      });\r\n    }, `${method} must re-throw any exceptions thrown by label.toString() conversion`);\r\n  }",
  "console›console-label-conversion.any.js›console.timeEnd()'s label gets converted to string via label.toString() when label is an object": "() => {\r\n    let labelToStringCalled = false;\r\n\r\n    console[method]({\r\n      toString() {\r\n        labelToStringCalled = true;\r\n      }\r\n    });\r\n\r\n    assert_true(labelToStringCalled, `${method}() must call toString() on label when label is an object`);\r\n  }",
  "console›console-label-conversion.any.js›console.timeEnd() throws exceptions generated by erroneous label.toString() conversion": "() => {\r\n    assert_throws({name: 'Error'}, () => {\r\n      console[method]({\r\n        toString() {\r\n          throw new Error('conversion error');\r\n        }\r\n      });\r\n    }, `${method} must re-throw any exceptions thrown by label.toString() conversion`);\r\n  }",
  "console›console-tests-historical.any.js›'timeline' function should not exist on the console object": "() => {\r\n  assert_equals(console.timeline, undefined, \"console.timeline should be undefined\");\r\n}",
  "console›console-tests-historical.any.js›'timelineEnd' function should not exist on the console object": "() => {\r\n  assert_equals(console.timelineEnd, undefined, \"console.timelineEnd should be undefined\");\r\n}",
  "console›console-tests-historical.any.js›'markTimeline' function should not exist on the console object": "() => {\r\n  assert_equals(console.markTimeline, undefined, \"console.markTimeline should be undefined\");\r\n}",
  "hr-time›basic.any.js›self.performance.now() is a function that returns a number": "function() {\r\n  assert_true((self.performance !== undefined), \"self.performance exists\");\r\n  assert_equals(typeof self.performance, \"object\", \"self.performance is an object\");\r\n  assert_equals((typeof self.performance.now), \"function\", \"self.performance.now() is a function\");\r\n  assert_equals(typeof self.performance.now(), \"number\", \"self.performance.now() returns a number\");\r\n}",
  "hr-time›basic.any.js›self.performance.now() returns a positive number": "function() {\r\n  assert_true(self.performance.now() > 0);\r\n}",
  "hr-time›basic.any.js›self.performance.now() difference is not negative": "function() {\r\n  var now1 = self.performance.now();\r\n  var now2 = self.performance.now();\r\n  assert_true((now2-now1) >= 0);\r\n}",
  "hr-time›basic.any.js›High resolution time has approximately the right relative magnitude": "async function() {\r\n  // Check whether the performance.now() method is close to Date() within 30ms (due to inaccuracies)\r\n  var initial_hrt = self.performance.now();\r\n  var initial_date = Date.now();\r\n  await new Promise((resove) => {\r\n    setTimeout(() => {\r\n      var final_hrt = self.performance.now();\r\n      var final_date = Date.now();\r\n      assert_approx_equals(final_hrt - initial_hrt, final_date - initial_date, 30, 'High resolution time value increased by approximately the same amount as time from date object');\r\n      resove();\r\n    }, 2000);\r\n  });\r\n}",
  "hr-time›monotonic-clock.any.js›self.performance.now() returns a positive number": "function() {\r\n  assert_true(self.performance.now() > 0, \"self.performance.now() returns positive numbers\");\r\n}",
  "hr-time›monotonic-clock.any.js›self.performance.now() difference is not negative": "function() {\r\n    var now1 = self.performance.now();\r\n    var now2 = self.performance.now();\r\n    assert_true((now2-now1) >= 0, \"self.performance.now() difference is not negative\");\r\n  }",
  "url›url-searchparams.any.js›URL.searchParams getter": "function() {\r\n    var url = bURL('http://example.org/?a=b')\r\n    assert_true(\"searchParams\" in url)\r\n    var searchParams = url.searchParams\r\n    assert_true(url.searchParams === searchParams, 'Object identity should hold.')\r\n  }",
  "url›url-searchparams.any.js›URL.searchParams updating, clearing": "function() {\r\n    var url = bURL('http://example.org/?a=b')\r\n    assert_true(\"searchParams\" in url)\r\n    var searchParams = url.searchParams\r\n    assert_equals(searchParams.toString(), 'a=b')\r\n\r\n    searchParams.set('a', 'b')\r\n    assert_equals(url.searchParams.toString(), 'a=b')\r\n    assert_equals(url.search, '?a=b')\r\n    url.search = ''\r\n    assert_equals(url.searchParams.toString(), '')\r\n    assert_equals(url.search, '')\r\n    assert_equals(searchParams.toString(), '')\r\n  }",
  "url›url-searchparams.any.js›URL.searchParams setter, invalid values": "function() {\r\n    'use strict'\r\n    var urlString = 'http://example.org'\r\n    var url = bURL(urlString)\r\n    assert_throws(TypeError(), function() { url.searchParams = new URLSearchParams(urlString) })\r\n  }",
  "url›url-searchparams.any.js›URL.searchParams and URL.search setters, update propagation": "function() {\r\n    var url = bURL('http://example.org/file?a=b&c=d')\r\n    assert_true(\"searchParams\" in url)\r\n    var searchParams = url.searchParams\r\n    assert_equals(url.search, '?a=b&c=d')\r\n    assert_equals(searchParams.toString(), 'a=b&c=d')\r\n\r\n    // Test that setting 'search' propagates to the URL object's query object.\r\n    url.search = 'e=f&g=h'\r\n    assert_equals(url.search, '?e=f&g=h')\r\n    assert_equals(searchParams.toString(), 'e=f&g=h')\r\n\r\n    // ..and same but with a leading '?'.\r\n    url.search = '?e=f&g=h'\r\n    assert_equals(url.search, '?e=f&g=h')\r\n    assert_equals(searchParams.toString(), 'e=f&g=h')\r\n\r\n    // And in the other direction, altering searchParams propagates\r\n    // back to 'search'.\r\n    searchParams.append('i', ' j ')\r\n    assert_equals(url.search, '?e=f&g=h&i=+j+')\r\n    assert_equals(url.searchParams.toString(), 'e=f&g=h&i=+j+')\r\n    assert_equals(searchParams.get('i'), ' j ')\r\n\r\n    searchParams.set('e', 'updated')\r\n    assert_equals(url.search, '?e=updated&g=h&i=+j+')\r\n    assert_equals(searchParams.get('e'), 'updated')\r\n\r\n    var url2 = bURL('http://example.org/file??a=b&c=d')\r\n    assert_equals(url2.search, '??a=b&c=d')\r\n    assert_equals(url2.searchParams.toString(), '%3Fa=b&c=d')\r\n\r\n    url2.href = 'http://example.org/file??a=b'\r\n    assert_equals(url2.search, '??a=b')\r\n    assert_equals(url2.searchParams.toString(), '%3Fa=b')\r\n  }",
  "url›url-tojson.any.js›": "() => {\r\n  const a = new URL(\"https://example.com/\")\r\n  assert_equals(JSON.stringify(a), \"\\\"https://example.com/\\\"\")\r\n}",
  "url›urlencoded-parser.any.js›URLSearchParams constructed with: test": "() => {\r\n    let sp = new URLSearchParams(val.input),\r\n        i = 0\r\n    for (let item of sp) {\r\n       assert_array_equals(item, val.output[i])\r\n       i++\r\n    }\r\n  }",
  "url›urlencoded-parser.any.js›request.formData() with input: test": "() => {\r\n    let init = new Request(\"about:blank\", { body: val.input, method: \"LADIDA\", headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=windows-1252\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›response.formData() with input: test": "() => {\r\n    let init = new Response(val.input, { headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=shift_jis\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›URLSearchParams constructed with: ﻿test=﻿": "() => {\r\n    let sp = new URLSearchParams(val.input),\r\n        i = 0\r\n    for (let item of sp) {\r\n       assert_array_equals(item, val.output[i])\r\n       i++\r\n    }\r\n  }",
  "url›urlencoded-parser.any.js›request.formData() with input: ﻿test=﻿": "() => {\r\n    let init = new Request(\"about:blank\", { body: val.input, method: \"LADIDA\", headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=windows-1252\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›response.formData() with input: ﻿test=﻿": "() => {\r\n    let init = new Response(val.input, { headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=shift_jis\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›URLSearchParams constructed with: %EF%BB%BFtest=%EF%BB%BF": "() => {\r\n    let sp = new URLSearchParams(val.input),\r\n        i = 0\r\n    for (let item of sp) {\r\n       assert_array_equals(item, val.output[i])\r\n       i++\r\n    }\r\n  }",
  "url›urlencoded-parser.any.js›request.formData() with input: %EF%BB%BFtest=%EF%BB%BF": "() => {\r\n    let init = new Request(\"about:blank\", { body: val.input, method: \"LADIDA\", headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=windows-1252\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›response.formData() with input: %EF%BB%BFtest=%EF%BB%BF": "() => {\r\n    let init = new Response(val.input, { headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=shift_jis\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›URLSearchParams constructed with: %FE%FF": "() => {\r\n    let sp = new URLSearchParams(val.input),\r\n        i = 0\r\n    for (let item of sp) {\r\n       assert_array_equals(item, val.output[i])\r\n       i++\r\n    }\r\n  }",
  "url›urlencoded-parser.any.js›request.formData() with input: %FE%FF": "() => {\r\n    let init = new Request(\"about:blank\", { body: val.input, method: \"LADIDA\", headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=windows-1252\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›response.formData() with input: %FE%FF": "() => {\r\n    let init = new Response(val.input, { headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=shift_jis\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›URLSearchParams constructed with: %FF%FE": "() => {\r\n    let sp = new URLSearchParams(val.input),\r\n        i = 0\r\n    for (let item of sp) {\r\n       assert_array_equals(item, val.output[i])\r\n       i++\r\n    }\r\n  }",
  "url›urlencoded-parser.any.js›request.formData() with input: %FF%FE": "() => {\r\n    let init = new Request(\"about:blank\", { body: val.input, method: \"LADIDA\", headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=windows-1252\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›response.formData() with input: %FF%FE": "() => {\r\n    let init = new Response(val.input, { headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=shift_jis\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›URLSearchParams constructed with: †&†=x": "() => {\r\n    let sp = new URLSearchParams(val.input),\r\n        i = 0\r\n    for (let item of sp) {\r\n       assert_array_equals(item, val.output[i])\r\n       i++\r\n    }\r\n  }",
  "url›urlencoded-parser.any.js›request.formData() with input: †&†=x": "() => {\r\n    let init = new Request(\"about:blank\", { body: val.input, method: \"LADIDA\", headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=windows-1252\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›response.formData() with input: †&†=x": "() => {\r\n    let init = new Response(val.input, { headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=shift_jis\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›URLSearchParams constructed with: %C2": "() => {\r\n    let sp = new URLSearchParams(val.input),\r\n        i = 0\r\n    for (let item of sp) {\r\n       assert_array_equals(item, val.output[i])\r\n       i++\r\n    }\r\n  }",
  "url›urlencoded-parser.any.js›request.formData() with input: %C2": "() => {\r\n    let init = new Request(\"about:blank\", { body: val.input, method: \"LADIDA\", headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=windows-1252\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›response.formData() with input: %C2": "() => {\r\n    let init = new Response(val.input, { headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=shift_jis\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›URLSearchParams constructed with: %C2x": "() => {\r\n    let sp = new URLSearchParams(val.input),\r\n        i = 0\r\n    for (let item of sp) {\r\n       assert_array_equals(item, val.output[i])\r\n       i++\r\n    }\r\n  }",
  "url›urlencoded-parser.any.js›request.formData() with input: %C2x": "() => {\r\n    let init = new Request(\"about:blank\", { body: val.input, method: \"LADIDA\", headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=windows-1252\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›response.formData() with input: %C2x": "() => {\r\n    let init = new Response(val.input, { headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=shift_jis\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›URLSearchParams constructed with: _charset_=windows-1252&test=%C2x": "() => {\r\n    let sp = new URLSearchParams(val.input),\r\n        i = 0\r\n    for (let item of sp) {\r\n       assert_array_equals(item, val.output[i])\r\n       i++\r\n    }\r\n  }",
  "url›urlencoded-parser.any.js›request.formData() with input: _charset_=windows-1252&test=%C2x": "() => {\r\n    let init = new Request(\"about:blank\", { body: val.input, method: \"LADIDA\", headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=windows-1252\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›response.formData() with input: _charset_=windows-1252&test=%C2x": "() => {\r\n    let init = new Response(val.input, { headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=shift_jis\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›URLSearchParams constructed with: ": "() => {\r\n    let sp = new URLSearchParams(val.input),\r\n        i = 0\r\n    for (let item of sp) {\r\n       assert_array_equals(item, val.output[i])\r\n       i++\r\n    }\r\n  }",
  "url›urlencoded-parser.any.js›request.formData() with input: ": "() => {\r\n    let init = new Request(\"about:blank\", { body: val.input, method: \"LADIDA\", headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=windows-1252\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›response.formData() with input: ": "() => {\r\n    let init = new Response(val.input, { headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=shift_jis\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›URLSearchParams constructed with: a": "() => {\r\n    let sp = new URLSearchParams(val.input),\r\n        i = 0\r\n    for (let item of sp) {\r\n       assert_array_equals(item, val.output[i])\r\n       i++\r\n    }\r\n  }",
  "url›urlencoded-parser.any.js›request.formData() with input: a": "() => {\r\n    let init = new Request(\"about:blank\", { body: val.input, method: \"LADIDA\", headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=windows-1252\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›response.formData() with input: a": "() => {\r\n    let init = new Response(val.input, { headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=shift_jis\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›URLSearchParams constructed with: a=b": "() => {\r\n    let sp = new URLSearchParams(val.input),\r\n        i = 0\r\n    for (let item of sp) {\r\n       assert_array_equals(item, val.output[i])\r\n       i++\r\n    }\r\n  }",
  "url›urlencoded-parser.any.js›request.formData() with input: a=b": "() => {\r\n    let init = new Request(\"about:blank\", { body: val.input, method: \"LADIDA\", headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=windows-1252\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›response.formData() with input: a=b": "() => {\r\n    let init = new Response(val.input, { headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=shift_jis\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›URLSearchParams constructed with: a=": "() => {\r\n    let sp = new URLSearchParams(val.input),\r\n        i = 0\r\n    for (let item of sp) {\r\n       assert_array_equals(item, val.output[i])\r\n       i++\r\n    }\r\n  }",
  "url›urlencoded-parser.any.js›request.formData() with input: a=": "() => {\r\n    let init = new Request(\"about:blank\", { body: val.input, method: \"LADIDA\", headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=windows-1252\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›response.formData() with input: a=": "() => {\r\n    let init = new Response(val.input, { headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=shift_jis\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›URLSearchParams constructed with: =b": "() => {\r\n    let sp = new URLSearchParams(val.input),\r\n        i = 0\r\n    for (let item of sp) {\r\n       assert_array_equals(item, val.output[i])\r\n       i++\r\n    }\r\n  }",
  "url›urlencoded-parser.any.js›request.formData() with input: =b": "() => {\r\n    let init = new Request(\"about:blank\", { body: val.input, method: \"LADIDA\", headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=windows-1252\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›response.formData() with input: =b": "() => {\r\n    let init = new Response(val.input, { headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=shift_jis\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›URLSearchParams constructed with: &": "() => {\r\n    let sp = new URLSearchParams(val.input),\r\n        i = 0\r\n    for (let item of sp) {\r\n       assert_array_equals(item, val.output[i])\r\n       i++\r\n    }\r\n  }",
  "url›urlencoded-parser.any.js›request.formData() with input: &": "() => {\r\n    let init = new Request(\"about:blank\", { body: val.input, method: \"LADIDA\", headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=windows-1252\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›response.formData() with input: &": "() => {\r\n    let init = new Response(val.input, { headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=shift_jis\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›URLSearchParams constructed with: &a": "() => {\r\n    let sp = new URLSearchParams(val.input),\r\n        i = 0\r\n    for (let item of sp) {\r\n       assert_array_equals(item, val.output[i])\r\n       i++\r\n    }\r\n  }",
  "url›urlencoded-parser.any.js›request.formData() with input: &a": "() => {\r\n    let init = new Request(\"about:blank\", { body: val.input, method: \"LADIDA\", headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=windows-1252\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›response.formData() with input: &a": "() => {\r\n    let init = new Response(val.input, { headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=shift_jis\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›URLSearchParams constructed with: a&": "() => {\r\n    let sp = new URLSearchParams(val.input),\r\n        i = 0\r\n    for (let item of sp) {\r\n       assert_array_equals(item, val.output[i])\r\n       i++\r\n    }\r\n  }",
  "url›urlencoded-parser.any.js›request.formData() with input: a&": "() => {\r\n    let init = new Request(\"about:blank\", { body: val.input, method: \"LADIDA\", headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=windows-1252\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›response.formData() with input: a&": "() => {\r\n    let init = new Response(val.input, { headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=shift_jis\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›URLSearchParams constructed with: a&a": "() => {\r\n    let sp = new URLSearchParams(val.input),\r\n        i = 0\r\n    for (let item of sp) {\r\n       assert_array_equals(item, val.output[i])\r\n       i++\r\n    }\r\n  }",
  "url›urlencoded-parser.any.js›request.formData() with input: a&a": "() => {\r\n    let init = new Request(\"about:blank\", { body: val.input, method: \"LADIDA\", headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=windows-1252\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›response.formData() with input: a&a": "() => {\r\n    let init = new Response(val.input, { headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=shift_jis\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›URLSearchParams constructed with: a&b&c": "() => {\r\n    let sp = new URLSearchParams(val.input),\r\n        i = 0\r\n    for (let item of sp) {\r\n       assert_array_equals(item, val.output[i])\r\n       i++\r\n    }\r\n  }",
  "url›urlencoded-parser.any.js›request.formData() with input: a&b&c": "() => {\r\n    let init = new Request(\"about:blank\", { body: val.input, method: \"LADIDA\", headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=windows-1252\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›response.formData() with input: a&b&c": "() => {\r\n    let init = new Response(val.input, { headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=shift_jis\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›URLSearchParams constructed with: a=b&c=d": "() => {\r\n    let sp = new URLSearchParams(val.input),\r\n        i = 0\r\n    for (let item of sp) {\r\n       assert_array_equals(item, val.output[i])\r\n       i++\r\n    }\r\n  }",
  "url›urlencoded-parser.any.js›request.formData() with input: a=b&c=d": "() => {\r\n    let init = new Request(\"about:blank\", { body: val.input, method: \"LADIDA\", headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=windows-1252\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›response.formData() with input: a=b&c=d": "() => {\r\n    let init = new Response(val.input, { headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=shift_jis\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›URLSearchParams constructed with: a=b&c=d&": "() => {\r\n    let sp = new URLSearchParams(val.input),\r\n        i = 0\r\n    for (let item of sp) {\r\n       assert_array_equals(item, val.output[i])\r\n       i++\r\n    }\r\n  }",
  "url›urlencoded-parser.any.js›request.formData() with input: a=b&c=d&": "() => {\r\n    let init = new Request(\"about:blank\", { body: val.input, method: \"LADIDA\", headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=windows-1252\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›response.formData() with input: a=b&c=d&": "() => {\r\n    let init = new Response(val.input, { headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=shift_jis\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›URLSearchParams constructed with: &&&a=b&&&&c=d&": "() => {\r\n    let sp = new URLSearchParams(val.input),\r\n        i = 0\r\n    for (let item of sp) {\r\n       assert_array_equals(item, val.output[i])\r\n       i++\r\n    }\r\n  }",
  "url›urlencoded-parser.any.js›request.formData() with input: &&&a=b&&&&c=d&": "() => {\r\n    let init = new Request(\"about:blank\", { body: val.input, method: \"LADIDA\", headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=windows-1252\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›response.formData() with input: &&&a=b&&&&c=d&": "() => {\r\n    let init = new Response(val.input, { headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=shift_jis\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›URLSearchParams constructed with: a=a&a=b&a=c": "() => {\r\n    let sp = new URLSearchParams(val.input),\r\n        i = 0\r\n    for (let item of sp) {\r\n       assert_array_equals(item, val.output[i])\r\n       i++\r\n    }\r\n  }",
  "url›urlencoded-parser.any.js›request.formData() with input: a=a&a=b&a=c": "() => {\r\n    let init = new Request(\"about:blank\", { body: val.input, method: \"LADIDA\", headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=windows-1252\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›response.formData() with input: a=a&a=b&a=c": "() => {\r\n    let init = new Response(val.input, { headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=shift_jis\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›URLSearchParams constructed with: a==a": "() => {\r\n    let sp = new URLSearchParams(val.input),\r\n        i = 0\r\n    for (let item of sp) {\r\n       assert_array_equals(item, val.output[i])\r\n       i++\r\n    }\r\n  }",
  "url›urlencoded-parser.any.js›request.formData() with input: a==a": "() => {\r\n    let init = new Request(\"about:blank\", { body: val.input, method: \"LADIDA\", headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=windows-1252\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›response.formData() with input: a==a": "() => {\r\n    let init = new Response(val.input, { headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=shift_jis\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›URLSearchParams constructed with: a=a+b+c+d": "() => {\r\n    let sp = new URLSearchParams(val.input),\r\n        i = 0\r\n    for (let item of sp) {\r\n       assert_array_equals(item, val.output[i])\r\n       i++\r\n    }\r\n  }",
  "url›urlencoded-parser.any.js›request.formData() with input: a=a+b+c+d": "() => {\r\n    let init = new Request(\"about:blank\", { body: val.input, method: \"LADIDA\", headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=windows-1252\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›response.formData() with input: a=a+b+c+d": "() => {\r\n    let init = new Response(val.input, { headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=shift_jis\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›URLSearchParams constructed with: %=a": "() => {\r\n    let sp = new URLSearchParams(val.input),\r\n        i = 0\r\n    for (let item of sp) {\r\n       assert_array_equals(item, val.output[i])\r\n       i++\r\n    }\r\n  }",
  "url›urlencoded-parser.any.js›request.formData() with input: %=a": "() => {\r\n    let init = new Request(\"about:blank\", { body: val.input, method: \"LADIDA\", headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=windows-1252\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›response.formData() with input: %=a": "() => {\r\n    let init = new Response(val.input, { headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=shift_jis\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›URLSearchParams constructed with: %a=a": "() => {\r\n    let sp = new URLSearchParams(val.input),\r\n        i = 0\r\n    for (let item of sp) {\r\n       assert_array_equals(item, val.output[i])\r\n       i++\r\n    }\r\n  }",
  "url›urlencoded-parser.any.js›request.formData() with input: %a=a": "() => {\r\n    let init = new Request(\"about:blank\", { body: val.input, method: \"LADIDA\", headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=windows-1252\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›response.formData() with input: %a=a": "() => {\r\n    let init = new Response(val.input, { headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=shift_jis\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›URLSearchParams constructed with: %a_=a": "() => {\r\n    let sp = new URLSearchParams(val.input),\r\n        i = 0\r\n    for (let item of sp) {\r\n       assert_array_equals(item, val.output[i])\r\n       i++\r\n    }\r\n  }",
  "url›urlencoded-parser.any.js›request.formData() with input: %a_=a": "() => {\r\n    let init = new Request(\"about:blank\", { body: val.input, method: \"LADIDA\", headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=windows-1252\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›response.formData() with input: %a_=a": "() => {\r\n    let init = new Response(val.input, { headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=shift_jis\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›URLSearchParams constructed with: %61=a": "() => {\r\n    let sp = new URLSearchParams(val.input),\r\n        i = 0\r\n    for (let item of sp) {\r\n       assert_array_equals(item, val.output[i])\r\n       i++\r\n    }\r\n  }",
  "url›urlencoded-parser.any.js›request.formData() with input: %61=a": "() => {\r\n    let init = new Request(\"about:blank\", { body: val.input, method: \"LADIDA\", headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=windows-1252\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›response.formData() with input: %61=a": "() => {\r\n    let init = new Response(val.input, { headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=shift_jis\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›URLSearchParams constructed with: %61+%4d%4D=": "() => {\r\n    let sp = new URLSearchParams(val.input),\r\n        i = 0\r\n    for (let item of sp) {\r\n       assert_array_equals(item, val.output[i])\r\n       i++\r\n    }\r\n  }",
  "url›urlencoded-parser.any.js›request.formData() with input: %61+%4d%4D=": "() => {\r\n    let init = new Request(\"about:blank\", { body: val.input, method: \"LADIDA\", headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=windows-1252\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlencoded-parser.any.js›response.formData() with input: %61+%4d%4D=": "() => {\r\n    let init = new Response(val.input, { headers: {\"Content-Type\": \"application/x-www-form-urlencoded;charset=shift_jis\"} }).formData()\r\n    return init.then((fd) => {\r\n      let i = 0\r\n      for (let item of fd) {\r\n         assert_array_equals(item, val.output[i])\r\n         i++\r\n      }\r\n    })\r\n  }",
  "url›urlsearchparams-append.any.js›Append same name": "function() {\r\n    var params = new URLSearchParams();\r\n    params.append('a', 'b');\r\n    assert_equals(params + '', 'a=b');\r\n    params.append('a', 'b');\r\n    assert_equals(params + '', 'a=b&a=b');\r\n    params.append('a', 'c');\r\n    assert_equals(params + '', 'a=b&a=b&a=c');\r\n}",
  "url›urlsearchparams-append.any.js›Append empty strings": "function() {\r\n    var params = new URLSearchParams();\r\n    params.append('', '');\r\n    assert_equals(params + '', '=');\r\n    params.append('', '');\r\n    assert_equals(params + '', '=&=');\r\n}",
  "url›urlsearchparams-append.any.js›Append null": "function() {\r\n    var params = new URLSearchParams();\r\n    params.append(null, null);\r\n    assert_equals(params + '', 'null=null');\r\n    params.append(null, null);\r\n    assert_equals(params + '', 'null=null&null=null');\r\n}",
  "url›urlsearchparams-append.any.js›Append multiple": "function() {\r\n    var params = new URLSearchParams();\r\n    params.append('first', 1);\r\n    params.append('second', 2);\r\n    params.append('third', '');\r\n    params.append('first', 10);\r\n    assert_true(params.has('first'), 'Search params object has name \"first\"');\r\n    assert_equals(params.get('first'), '1', 'Search params object has name \"first\" with value \"1\"');\r\n    assert_equals(params.get('second'), '2', 'Search params object has name \"second\" with value \"2\"');\r\n    assert_equals(params.get('third'), '', 'Search params object has name \"third\" with value \"\"');\r\n    params.append('first', 10);\r\n    assert_equals(params.get('first'), '1', 'Search params object has name \"first\" with value \"1\"');\r\n}",
  "url›urlsearchparams-constructor.any.js›Basic URLSearchParams construction": "function() {\r\n    var params = new URLSearchParams();\r\n    assert_equals(params + '', '');\r\n    params = new URLSearchParams('');\r\n    assert_equals(params + '', '');\r\n    params = new URLSearchParams('a=b');\r\n    assert_equals(params + '', 'a=b');\r\n    params = new URLSearchParams(params);\r\n    assert_equals(params + '', 'a=b');\r\n}",
  "url›urlsearchparams-constructor.any.js›URLSearchParams constructor, no arguments": "function() {\r\n    var params = new URLSearchParams()\r\n    assert_equals(params.toString(), \"\")\r\n}",
  "url›urlsearchparams-constructor.any.js›URLSearchParams constructor, remove leading \"?\"": "function () {\r\n    var params = new URLSearchParams(\"?a=b\")\r\n    assert_equals(params.toString(), \"a=b\")\r\n}",
  "url›urlsearchparams-constructor.any.js›URLSearchParams constructor, DOMException as argument": "() => {\r\n    var params = new URLSearchParams(DOMException);\r\n    assert_equals(params.toString(), \"INDEX_SIZE_ERR=1&DOMSTRING_SIZE_ERR=2&HIERARCHY_REQUEST_ERR=3&WRONG_DOCUMENT_ERR=4&INVALID_CHARACTER_ERR=5&NO_DATA_ALLOWED_ERR=6&NO_MODIFICATION_ALLOWED_ERR=7&NOT_FOUND_ERR=8&NOT_SUPPORTED_ERR=9&INUSE_ATTRIBUTE_ERR=10&INVALID_STATE_ERR=11&SYNTAX_ERR=12&INVALID_MODIFICATION_ERR=13&NAMESPACE_ERR=14&INVALID_ACCESS_ERR=15&VALIDATION_ERR=16&TYPE_MISMATCH_ERR=17&SECURITY_ERR=18&NETWORK_ERR=19&ABORT_ERR=20&URL_MISMATCH_ERR=21&QUOTA_EXCEEDED_ERR=22&TIMEOUT_ERR=23&INVALID_NODE_TYPE_ERR=24&DATA_CLONE_ERR=25\")\r\n    assert_throws(new TypeError(), () => new URLSearchParams(DOMException.prototype),\r\n                  \"Constructing a URLSearchParams from DOMException.prototype should throw due to branding checks\");\r\n}",
  "url›urlsearchparams-constructor.any.js›URLSearchParams constructor, empty string as argument": "() => {\r\n    var params = new URLSearchParams('');\r\n    assert_true(params != null, 'constructor returned non-null value.');\r\n    assert_equals(params.__proto__, URLSearchParams.prototype, 'expected URLSearchParams.prototype as prototype.');\r\n}",
  "url›urlsearchparams-constructor.any.js›URLSearchParams constructor, {} as argument": "() => {\r\n    var params = new URLSearchParams({});\r\n    assert_equals(params + '', \"\");\r\n}",
  "url›urlsearchparams-constructor.any.js›URLSearchParams constructor, string.": "function() {\r\n    var params = new URLSearchParams('a=b');\r\n    assert_true(params != null, 'constructor returned non-null value.');\r\n    assert_true(params.has('a'), 'Search params object has name \"a\"');\r\n    assert_false(params.has('b'), 'Search params object has not got name \"b\"');\r\n\r\n    params = new URLSearchParams('a=b&c');\r\n    assert_true(params != null, 'constructor returned non-null value.');\r\n    assert_true(params.has('a'), 'Search params object has name \"a\"');\r\n    assert_true(params.has('c'), 'Search params object has name \"c\"');\r\n\r\n    params = new URLSearchParams('&a&&& &&&&&a+b=& c&m%c3%b8%c3%b8');\r\n    assert_true(params != null, 'constructor returned non-null value.');\r\n    assert_true(params.has('a'), 'Search params object has name \"a\"');\r\n    assert_true(params.has('a b'), 'Search params object has name \"a b\"');\r\n    assert_true(params.has(' '), 'Search params object has name \" \"');\r\n    assert_false(params.has('c'), 'Search params object did not have the name \"c\"');\r\n    assert_true(params.has(' c'), 'Search params object has name \" c\"');\r\n    assert_true(params.has('møø'), 'Search params object has name \"møø\"');\r\n}",
  "url›urlsearchparams-constructor.any.js›URLSearchParams constructor, object.": "function() {\r\n    var seed = new URLSearchParams('a=b&c=d');\r\n    var params = new URLSearchParams(seed);\r\n    assert_true(params != null, 'constructor returned non-null value.');\r\n    assert_equals(params.get('a'), 'b');\r\n    assert_equals(params.get('c'), 'd');\r\n    assert_false(params.has('d'));\r\n    // The name-value pairs are copied when created; later updates\r\n    // should not be observable.\r\n    seed.append('e', 'f');\r\n    assert_false(params.has('e'));\r\n    params.append('g', 'h');\r\n    assert_false(seed.has('g'));\r\n}",
  "url›urlsearchparams-constructor.any.js›Parse +": "function() {\r\n    var params = new URLSearchParams('a=b+c');\r\n    assert_equals(params.get('a'), 'b c');\r\n    params = new URLSearchParams('a+b=c');\r\n    assert_equals(params.get('a b'), 'c');\r\n}",
  "url›urlsearchparams-constructor.any.js›Parse encoded +": "function() {\r\n    const testValue = '+15555555555';\r\n    const params = new URLSearchParams();\r\n    params.set('query', testValue);\r\n    var newParams = new URLSearchParams(params.toString());\r\n\r\n    assert_equals(params.toString(), 'query=%2B15555555555');\r\n    assert_equals(params.get('query'), testValue);\r\n    assert_equals(newParams.get('query'), testValue);\r\n}",
  "url›urlsearchparams-constructor.any.js›Parse space": "function() {\r\n    var params = new URLSearchParams('a=b c');\r\n    assert_equals(params.get('a'), 'b c');\r\n    params = new URLSearchParams('a b=c');\r\n    assert_equals(params.get('a b'), 'c');\r\n}",
  "url›urlsearchparams-constructor.any.js›Parse %20": "function() {\r\n    var params = new URLSearchParams('a=b%20c');\r\n    assert_equals(params.get('a'), 'b c');\r\n    params = new URLSearchParams('a%20b=c');\r\n    assert_equals(params.get('a b'), 'c');\r\n}",
  "url›urlsearchparams-constructor.any.js›Parse \\0": "function() {\r\n    var params = new URLSearchParams('a=b\\0c');\r\n    assert_equals(params.get('a'), 'b\\0c');\r\n    params = new URLSearchParams('a\\0b=c');\r\n    assert_equals(params.get('a\\0b'), 'c');\r\n}",
  "url›urlsearchparams-constructor.any.js›Parse %00": "function() {\r\n    var params = new URLSearchParams('a=b%00c');\r\n    assert_equals(params.get('a'), 'b\\0c');\r\n    params = new URLSearchParams('a%00b=c');\r\n    assert_equals(params.get('a\\0b'), 'c');\r\n}",
  "url›urlsearchparams-constructor.any.js›Parse ⎄": "function() {\r\n    var params = new URLSearchParams('a=b\\u2384');\r\n    assert_equals(params.get('a'), 'b\\u2384');\r\n    params = new URLSearchParams('a\\u2384b=c');\r\n    assert_equals(params.get('a\\u2384b'), 'c');\r\n}",
  "url›urlsearchparams-constructor.any.js›Parse %e2%8e%84": "function() {\r\n    var params = new URLSearchParams('a=b%e2%8e%84');\r\n    assert_equals(params.get('a'), 'b\\u2384');\r\n    params = new URLSearchParams('a%e2%8e%84b=c');\r\n    assert_equals(params.get('a\\u2384b'), 'c');\r\n}",
  "url›urlsearchparams-constructor.any.js›Parse 💩": "function() {\r\n    var params = new URLSearchParams('a=b\\uD83D\\uDCA9c');\r\n    assert_equals(params.get('a'), 'b\\uD83D\\uDCA9c');\r\n    params = new URLSearchParams('a\\uD83D\\uDCA9b=c');\r\n    assert_equals(params.get('a\\uD83D\\uDCA9b'), 'c');\r\n}",
  "url›urlsearchparams-constructor.any.js›Parse %f0%9f%92%a9": "function() {\r\n    var params = new URLSearchParams('a=b%f0%9f%92%a9c');\r\n    assert_equals(params.get('a'), 'b\\uD83D\\uDCA9c');\r\n    params = new URLSearchParams('a%f0%9f%92%a9b=c');\r\n    assert_equals(params.get('a\\uD83D\\uDCA9b'), 'c');\r\n}",
  "url›urlsearchparams-constructor.any.js›Constructor with sequence of sequences of strings": "function() {\r\n    var params = new URLSearchParams([]);\r\n    assert_true(params != null, 'constructor returned non-null value.');\r\n    params = new URLSearchParams([['a', 'b'], ['c', 'd']]);\r\n    assert_equals(params.get(\"a\"), \"b\");\r\n    assert_equals(params.get(\"c\"), \"d\");\r\n    assert_throws(new TypeError(), function() { new URLSearchParams([[1]]); });\r\n    assert_throws(new TypeError(), function() { new URLSearchParams([[1,2,3]]); });\r\n}",
  "url›urlsearchparams-constructor.any.js›Construct with object with +": "() => {\r\n        let params = new URLSearchParams(val.input),\r\n            i = 0\r\n        for (let param of params) {\r\n            assert_array_equals(param, val.output[i])\r\n            i++\r\n        }\r\n    }",
  "url›urlsearchparams-constructor.any.js›Construct with object with two keys": "() => {\r\n        let params = new URLSearchParams(val.input),\r\n            i = 0\r\n        for (let param of params) {\r\n            assert_array_equals(param, val.output[i])\r\n            i++\r\n        }\r\n    }",
  "url›urlsearchparams-constructor.any.js›Construct with array with two keys": "() => {\r\n        let params = new URLSearchParams(val.input),\r\n            i = 0\r\n        for (let param of params) {\r\n            assert_array_equals(param, val.output[i])\r\n            i++\r\n        }\r\n    }",
  "url›urlsearchparams-constructor.any.js›Construct with object with NULL, non-ASCII, and surrogate keys": "() => {\r\n        let params = new URLSearchParams(val.input),\r\n            i = 0\r\n        for (let param of params) {\r\n            assert_array_equals(param, val.output[i])\r\n            i++\r\n        }\r\n    }",
  "url›urlsearchparams-constructor.any.js›Custom [Symbol.iterator]": "() => {\r\n  var params = new URLSearchParams()\r\n  params[Symbol.iterator] = function *() {\r\n    yield [\"a\", \"b\"]\r\n  }\r\n  let params2 = new URLSearchParams(params)\r\n  assert_equals(params2.get(\"a\"), \"b\")\r\n}",
  "url›urlsearchparams-delete.any.js›Delete basics": "function() {\r\n    var params = new URLSearchParams('a=b&c=d');\r\n    params.delete('a');\r\n    assert_equals(params + '', 'c=d');\r\n    params = new URLSearchParams('a=a&b=b&a=a&c=c');\r\n    params.delete('a');\r\n    assert_equals(params + '', 'b=b&c=c');\r\n    params = new URLSearchParams('a=a&=&b=b&c=c');\r\n    params.delete('');\r\n    assert_equals(params + '', 'a=a&b=b&c=c');\r\n    params = new URLSearchParams('a=a&null=null&b=b');\r\n    params.delete(null);\r\n    assert_equals(params + '', 'a=a&b=b');\r\n    params = new URLSearchParams('a=a&undefined=undefined&b=b');\r\n    params.delete(undefined);\r\n    assert_equals(params + '', 'a=a&b=b');\r\n}",
  "url›urlsearchparams-delete.any.js›Deleting appended multiple": "function() {\r\n    var params = new URLSearchParams();\r\n    params.append('first', 1);\r\n    assert_true(params.has('first'), 'Search params object has name \"first\"');\r\n    assert_equals(params.get('first'), '1', 'Search params object has name \"first\" with value \"1\"');\r\n    params.delete('first');\r\n    assert_false(params.has('first'), 'Search params object has no \"first\" name');\r\n    params.append('first', 1);\r\n    params.append('first', 10);\r\n    params.delete('first');\r\n    assert_false(params.has('first'), 'Search params object has no \"first\" name');\r\n}",
  "url›urlsearchparams-delete.any.js›Deleting all params removes ? from URL": "function() {\r\n    var url = new URL('http://example.com/?param1&param2');\r\n    url.searchParams.delete('param1');\r\n    url.searchParams.delete('param2');\r\n    assert_equals(url.href, 'http://example.com/', 'url.href does not have ?');\r\n    assert_equals(url.search, '', 'url.search does not have ?');\r\n}",
  "url›urlsearchparams-delete.any.js›Removing non-existent param removes ? from URL": "function() {\r\n    var url = new URL('http://example.com/?');\r\n    url.searchParams.delete('param1');\r\n    assert_equals(url.href, 'http://example.com/', 'url.href does not have ?');\r\n    assert_equals(url.search, '', 'url.search does not have ?');\r\n}",
  "url›urlsearchparams-foreach.any.js›ForEach Check": "function() {\r\n    var params = new URLSearchParams('a=1&b=2&c=3');\r\n    var keys = [];\r\n    var values = [];\r\n    params.forEach(function(value, key) {\r\n        keys.push(key);\r\n        values.push(value);\r\n    });\r\n    assert_array_equals(keys, ['a', 'b', 'c']);\r\n    assert_array_equals(values, ['1', '2', '3']);\r\n}",
  "url›urlsearchparams-foreach.any.js›For-of Check": "function() {\r\n    let a = new URL(\"http://a.b/c?a=1&b=2&c=3&d=4\");\r\n    let b = a.searchParams;\r\n    var c = [];\r\n    for (i of b) {\r\n        a.search = \"x=1&y=2&z=3\";\r\n        c.push(i);\r\n    }\r\n    assert_array_equals(c[0], [\"a\",\"1\"]);\r\n    assert_array_equals(c[1], [\"y\",\"2\"]);\r\n    assert_array_equals(c[2], [\"z\",\"3\"]);\r\n}",
  "url›urlsearchparams-foreach.any.js›empty": "function() {\r\n    let a = new URL(\"http://a.b/c\");\r\n    let b = a.searchParams;\r\n    for (i of b) {\r\n        assert_unreached(i);\r\n    }\r\n}",
  "url›urlsearchparams-foreach.any.js›delete next param during iteration": "function() {\r\n    const url = new URL(\"http://localhost/query?param0=0&param1=1&param2=2\");\r\n    const searchParams = url.searchParams;\r\n    const seen = [];\r\n    for (param of searchParams) {\r\n        if (param[0] === 'param0') {\r\n            searchParams.delete('param1');\r\n        }\r\n        seen.push(param);\r\n    }\r\n\r\n    assert_array_equals(seen[0], [\"param0\", \"0\"]);\r\n    assert_array_equals(seen[1], [\"param2\", \"2\"]);\r\n}",
  "url›urlsearchparams-foreach.any.js›delete current param during iteration": "function() {\r\n    const url = new URL(\"http://localhost/query?param0=0&param1=1&param2=2\");\r\n    const searchParams = url.searchParams;\r\n    const seen = [];\r\n    for (param of searchParams) {\r\n        if (param[0] === 'param0') {\r\n            searchParams.delete('param0');\r\n            // 'param1=1' is now in the first slot, so the next iteration will see 'param2=2'.\r\n        } else {\r\n            seen.push(param);\r\n        }\r\n    }\r\n\r\n    assert_array_equals(seen[0], [\"param2\", \"2\"]);\r\n}",
  "url›urlsearchparams-foreach.any.js›delete every param seen during iteration": "function() {\r\n    const url = new URL(\"http://localhost/query?param0=0&param1=1&param2=2\");\r\n    const searchParams = url.searchParams;\r\n    const seen = [];\r\n    for (param of searchParams) {\r\n        seen.push(param[0]);\r\n        searchParams.delete(param[0]);\r\n    }\r\n\r\n    assert_array_equals(seen, [\"param0\", \"param2\"], \"param1 should not have been seen by the loop\");\r\n    assert_equals(String(searchParams), \"param1=1\", \"param1 should remain\");\r\n}",
  "url›urlsearchparams-get.any.js›Get basics": "function() {\r\n    var params = new URLSearchParams('a=b&c=d');\r\n    assert_equals(params.get('a'), 'b');\r\n    assert_equals(params.get('c'), 'd');\r\n    assert_equals(params.get('e'), null);\r\n    params = new URLSearchParams('a=b&c=d&a=e');\r\n    assert_equals(params.get('a'), 'b');\r\n    params = new URLSearchParams('=b&c=d');\r\n    assert_equals(params.get(''), 'b');\r\n    params = new URLSearchParams('a=&c=d&a=e');\r\n    assert_equals(params.get('a'), '');\r\n}",
  "url›urlsearchparams-get.any.js›More get() basics": "function() {\r\n    var params = new URLSearchParams('first=second&third&&');\r\n    assert_true(params != null, 'constructor returned non-null value.');\r\n    assert_true(params.has('first'), 'Search params object has name \"first\"');\r\n    assert_equals(params.get('first'), 'second', 'Search params object has name \"first\" with value \"second\"');\r\n    assert_equals(params.get('third'), '', 'Search params object has name \"third\" with the empty value.');\r\n    assert_equals(params.get('fourth'), null, 'Search params object has no \"fourth\" name and value.');\r\n}",
  "url›urlsearchparams-getall.any.js›getAll() basics": "function() {\r\n    var params = new URLSearchParams('a=b&c=d');\r\n    assert_array_equals(params.getAll('a'), ['b']);\r\n    assert_array_equals(params.getAll('c'), ['d']);\r\n    assert_array_equals(params.getAll('e'), []);\r\n    params = new URLSearchParams('a=b&c=d&a=e');\r\n    assert_array_equals(params.getAll('a'), ['b', 'e']);\r\n    params = new URLSearchParams('=b&c=d');\r\n    assert_array_equals(params.getAll(''), ['b']);\r\n    params = new URLSearchParams('a=&c=d&a=e');\r\n    assert_array_equals(params.getAll('a'), ['', 'e']);\r\n}",
  "url›urlsearchparams-getall.any.js›getAll() multiples": "function() {\r\n    var params = new URLSearchParams('a=1&a=2&a=3&a');\r\n    assert_true(params.has('a'), 'Search params object has name \"a\"');\r\n    var matches = params.getAll('a');\r\n    assert_true(matches && matches.length == 4, 'Search params object has values for name \"a\"');\r\n    assert_array_equals(matches, ['1', '2', '3', ''], 'Search params object has expected name \"a\" values');\r\n    params.set('a', 'one');\r\n    assert_equals(params.get('a'), 'one', 'Search params object has name \"a\" with value \"one\"');\r\n    var matches = params.getAll('a');\r\n    assert_true(matches && matches.length == 1, 'Search params object has values for name \"a\"');\r\n    assert_array_equals(matches, ['one'], 'Search params object has expected name \"a\" values');\r\n}",
  "url›urlsearchparams-has.any.js›Has basics": "function() {\r\n    var params = new URLSearchParams('a=b&c=d');\r\n    assert_true(params.has('a'));\r\n    assert_true(params.has('c'));\r\n    assert_false(params.has('e'));\r\n    params = new URLSearchParams('a=b&c=d&a=e');\r\n    assert_true(params.has('a'));\r\n    params = new URLSearchParams('=b&c=d');\r\n    assert_true(params.has(''));\r\n    params = new URLSearchParams('null=a');\r\n    assert_true(params.has(null));\r\n}",
  "url›urlsearchparams-has.any.js›has() following delete()": "function() {\r\n    var params = new URLSearchParams('a=b&c=d&&');\r\n    params.append('first', 1);\r\n    params.append('first', 2);\r\n    assert_true(params.has('a'), 'Search params object has name \"a\"');\r\n    assert_true(params.has('c'), 'Search params object has name \"c\"');\r\n    assert_true(params.has('first'), 'Search params object has name \"first\"');\r\n    assert_false(params.has('d'), 'Search params object has no name \"d\"');\r\n    params.delete('first');\r\n    assert_false(params.has('first'), 'Search params object has no name \"first\"');\r\n}",
  "url›urlsearchparams-set.any.js›Set basics": "function() {\r\n    var params = new URLSearchParams('a=b&c=d');\r\n    params.set('a', 'B');\r\n    assert_equals(params + '', 'a=B&c=d');\r\n    params = new URLSearchParams('a=b&c=d&a=e');\r\n    params.set('a', 'B');\r\n    assert_equals(params + '', 'a=B&c=d')\r\n    params.set('e', 'f');\r\n    assert_equals(params + '', 'a=B&c=d&e=f')\r\n}",
  "url›urlsearchparams-set.any.js›URLSearchParams.set": "function() {\r\n    var params = new URLSearchParams('a=1&a=2&a=3');\r\n    assert_true(params.has('a'), 'Search params object has name \"a\"');\r\n    assert_equals(params.get('a'), '1', 'Search params object has name \"a\" with value \"1\"');\r\n    params.set('first', 4);\r\n    assert_true(params.has('a'), 'Search params object has name \"a\"');\r\n    assert_equals(params.get('a'), '1', 'Search params object has name \"a\" with value \"1\"');\r\n    params.set('a', 4);\r\n    assert_true(params.has('a'), 'Search params object has name \"a\"');\r\n    assert_equals(params.get('a'), '4', 'Search params object has name \"a\" with value \"4\"');\r\n}",
  "url›urlsearchparams-sort.any.js›Parse and sort: z=b&a=b&z=a&a=a": "() => {\r\n    let params = new URLSearchParams(val.input),\r\n        i = 0\r\n    params.sort()\r\n    for(let param of params) {\r\n      assert_array_equals(param, val.output[i])\r\n      i++\r\n    }\r\n  }",
  "url›urlsearchparams-sort.any.js›URL parse and sort: z=b&a=b&z=a&a=a": "() => {\r\n    let url = new URL(\"?\" + val.input, \"https://example/\")\r\n    url.searchParams.sort()\r\n    let params = new URLSearchParams(url.search),\r\n        i = 0\r\n    for(let param of params) {\r\n      assert_array_equals(param, val.output[i])\r\n      i++\r\n    }\r\n  }",
  "url›urlsearchparams-sort.any.js›Parse and sort: �=x&￼&�=a": "() => {\r\n    let params = new URLSearchParams(val.input),\r\n        i = 0\r\n    params.sort()\r\n    for(let param of params) {\r\n      assert_array_equals(param, val.output[i])\r\n      i++\r\n    }\r\n  }",
  "url›urlsearchparams-sort.any.js›URL parse and sort: �=x&￼&�=a": "() => {\r\n    let url = new URL(\"?\" + val.input, \"https://example/\")\r\n    url.searchParams.sort()\r\n    let params = new URLSearchParams(url.search),\r\n        i = 0\r\n    for(let param of params) {\r\n      assert_array_equals(param, val.output[i])\r\n      i++\r\n    }\r\n  }",
  "url›urlsearchparams-sort.any.js›Parse and sort: ﬃ&🌈": "() => {\r\n    let params = new URLSearchParams(val.input),\r\n        i = 0\r\n    params.sort()\r\n    for(let param of params) {\r\n      assert_array_equals(param, val.output[i])\r\n      i++\r\n    }\r\n  }",
  "url›urlsearchparams-sort.any.js›URL parse and sort: ﬃ&🌈": "() => {\r\n    let url = new URL(\"?\" + val.input, \"https://example/\")\r\n    url.searchParams.sort()\r\n    let params = new URLSearchParams(url.search),\r\n        i = 0\r\n    for(let param of params) {\r\n      assert_array_equals(param, val.output[i])\r\n      i++\r\n    }\r\n  }",
  "url›urlsearchparams-sort.any.js›Parse and sort: é&e�&é": "() => {\r\n    let params = new URLSearchParams(val.input),\r\n        i = 0\r\n    params.sort()\r\n    for(let param of params) {\r\n      assert_array_equals(param, val.output[i])\r\n      i++\r\n    }\r\n  }",
  "url›urlsearchparams-sort.any.js›URL parse and sort: é&e�&é": "() => {\r\n    let url = new URL(\"?\" + val.input, \"https://example/\")\r\n    url.searchParams.sort()\r\n    let params = new URLSearchParams(url.search),\r\n        i = 0\r\n    for(let param of params) {\r\n      assert_array_equals(param, val.output[i])\r\n      i++\r\n    }\r\n  }",
  "url›urlsearchparams-sort.any.js›Parse and sort: z=z&a=a&z=y&a=b&z=x&a=c&z=w&a=d&z=v&a=e&z=u&a=f&z=t&a=g": "() => {\r\n    let params = new URLSearchParams(val.input),\r\n        i = 0\r\n    params.sort()\r\n    for(let param of params) {\r\n      assert_array_equals(param, val.output[i])\r\n      i++\r\n    }\r\n  }",
  "url›urlsearchparams-sort.any.js›URL parse and sort: z=z&a=a&z=y&a=b&z=x&a=c&z=w&a=d&z=v&a=e&z=u&a=f&z=t&a=g": "() => {\r\n    let url = new URL(\"?\" + val.input, \"https://example/\")\r\n    url.searchParams.sort()\r\n    let params = new URLSearchParams(url.search),\r\n        i = 0\r\n    for(let param of params) {\r\n      assert_array_equals(param, val.output[i])\r\n      i++\r\n    }\r\n  }",
  "url›urlsearchparams-sort.any.js›Parse and sort: bbb&bb&aaa&aa=x&aa=y": "() => {\r\n    let params = new URLSearchParams(val.input),\r\n        i = 0\r\n    params.sort()\r\n    for(let param of params) {\r\n      assert_array_equals(param, val.output[i])\r\n      i++\r\n    }\r\n  }",
  "url›urlsearchparams-sort.any.js›URL parse and sort: bbb&bb&aaa&aa=x&aa=y": "() => {\r\n    let url = new URL(\"?\" + val.input, \"https://example/\")\r\n    url.searchParams.sort()\r\n    let params = new URLSearchParams(url.search),\r\n        i = 0\r\n    for(let param of params) {\r\n      assert_array_equals(param, val.output[i])\r\n      i++\r\n    }\r\n  }",
  "url›urlsearchparams-sort.any.js›Parse and sort: z=z&=f&=t&=x": "() => {\r\n    let params = new URLSearchParams(val.input),\r\n        i = 0\r\n    params.sort()\r\n    for(let param of params) {\r\n      assert_array_equals(param, val.output[i])\r\n      i++\r\n    }\r\n  }",
  "url›urlsearchparams-sort.any.js›URL parse and sort: z=z&=f&=t&=x": "() => {\r\n    let url = new URL(\"?\" + val.input, \"https://example/\")\r\n    url.searchParams.sort()\r\n    let params = new URLSearchParams(url.search),\r\n        i = 0\r\n    for(let param of params) {\r\n      assert_array_equals(param, val.output[i])\r\n      i++\r\n    }\r\n  }",
  "url›urlsearchparams-sort.any.js›Parse and sort: a🌈&a💩": "() => {\r\n    let params = new URLSearchParams(val.input),\r\n        i = 0\r\n    params.sort()\r\n    for(let param of params) {\r\n      assert_array_equals(param, val.output[i])\r\n      i++\r\n    }\r\n  }",
  "url›urlsearchparams-sort.any.js›URL parse and sort: a🌈&a💩": "() => {\r\n    let url = new URL(\"?\" + val.input, \"https://example/\")\r\n    url.searchParams.sort()\r\n    let params = new URLSearchParams(url.search),\r\n        i = 0\r\n    for(let param of params) {\r\n      assert_array_equals(param, val.output[i])\r\n      i++\r\n    }\r\n  }",
  "url›urlsearchparams-sort.any.js›Sorting non-existent params removes ? from URL": "function() {\r\n  const url = new URL(\"http://example.com/?\")\r\n  url.searchParams.sort()\r\n  assert_equals(url.href, \"http://example.com/\")\r\n  assert_equals(url.search, \"\")\r\n}",
  "url›urlsearchparams-stringifier.any.js›Serialize space": "function() {\r\n    var params = new URLSearchParams();\r\n    params.append('a', 'b c');\r\n    assert_equals(params + '', 'a=b+c');\r\n    params.delete('a');\r\n    params.append('a b', 'c');\r\n    assert_equals(params + '', 'a+b=c');\r\n}",
  "url›urlsearchparams-stringifier.any.js›Serialize empty value": "function() {\r\n    var params = new URLSearchParams();\r\n    params.append('a', '');\r\n    assert_equals(params + '', 'a=');\r\n    params.append('a', '');\r\n    assert_equals(params + '', 'a=&a=');\r\n    params.append('', 'b');\r\n    assert_equals(params + '', 'a=&a=&=b');\r\n    params.append('', '');\r\n    assert_equals(params + '', 'a=&a=&=b&=');\r\n    params.append('', '');\r\n    assert_equals(params + '', 'a=&a=&=b&=&=');\r\n}",
  "url›urlsearchparams-stringifier.any.js›Serialize empty name": "function() {\r\n    var params = new URLSearchParams();\r\n    params.append('', 'b');\r\n    assert_equals(params + '', '=b');\r\n    params.append('', 'b');\r\n    assert_equals(params + '', '=b&=b');\r\n}",
  "url›urlsearchparams-stringifier.any.js›Serialize empty name and value": "function() {\r\n    var params = new URLSearchParams();\r\n    params.append('', '');\r\n    assert_equals(params + '', '=');\r\n    params.append('', '');\r\n    assert_equals(params + '', '=&=');\r\n}",
  "url›urlsearchparams-stringifier.any.js›Serialize +": "function() {\r\n    var params = new URLSearchParams();\r\n    params.append('a', 'b+c');\r\n    assert_equals(params + '', 'a=b%2Bc');\r\n    params.delete('a');\r\n    params.append('a+b', 'c');\r\n    assert_equals(params + '', 'a%2Bb=c');\r\n}",
  "url›urlsearchparams-stringifier.any.js›Serialize =": "function() {\r\n    var params = new URLSearchParams();\r\n    params.append('=', 'a');\r\n    assert_equals(params + '', '%3D=a');\r\n    params.append('b', '=');\r\n    assert_equals(params + '', '%3D=a&b=%3D');\r\n}",
  "url›urlsearchparams-stringifier.any.js›Serialize &": "function() {\r\n    var params = new URLSearchParams();\r\n    params.append('&', 'a');\r\n    assert_equals(params + '', '%26=a');\r\n    params.append('b', '&');\r\n    assert_equals(params + '', '%26=a&b=%26');\r\n}",
  "url›urlsearchparams-stringifier.any.js›Serialize *-._": "function() {\r\n    var params = new URLSearchParams();\r\n    params.append('a', '*-._');\r\n    assert_equals(params + '', 'a=*-._');\r\n    params.delete('a');\r\n    params.append('*-._', 'c');\r\n    assert_equals(params + '', '*-._=c');\r\n}",
  "url›urlsearchparams-stringifier.any.js›Serialize %": "function() {\r\n    var params = new URLSearchParams();\r\n    params.append('a', 'b%c');\r\n    assert_equals(params + '', 'a=b%25c');\r\n    params.delete('a');\r\n    params.append('a%b', 'c');\r\n    assert_equals(params + '', 'a%25b=c');\r\n}",
  "url›urlsearchparams-stringifier.any.js›Serialize \\0": "function() {\r\n    var params = new URLSearchParams();\r\n    params.append('a', 'b\\0c');\r\n    assert_equals(params + '', 'a=b%00c');\r\n    params.delete('a');\r\n    params.append('a\\0b', 'c');\r\n    assert_equals(params + '', 'a%00b=c');\r\n}",
  "url›urlsearchparams-stringifier.any.js›Serialize 💩": "function() {\r\n    var params = new URLSearchParams();\r\n    params.append('a', 'b\\uD83D\\uDCA9c');\r\n    assert_equals(params + '', 'a=b%F0%9F%92%A9c');\r\n    params.delete('a');\r\n    params.append('a\\uD83D\\uDCA9b', 'c');\r\n    assert_equals(params + '', 'a%F0%9F%92%A9b=c');\r\n}",
  "url›urlsearchparams-stringifier.any.js›URLSearchParams.toString": "function() {\r\n    var params;\r\n    params = new URLSearchParams('a=b&c=d&&e&&');\r\n    assert_equals(params.toString(), 'a=b&c=d&e=');\r\n    params = new URLSearchParams('a = b &a=b&c=d%20');\r\n    assert_equals(params.toString(), 'a+=+b+&a=b&c=d+');\r\n    // The lone '=' _does_ survive the roundtrip.\r\n    params = new URLSearchParams('a=&a=b');\r\n    assert_equals(params.toString(), 'a=&a=b');\r\n}",
  "url›urlsearchparams-stringifier.any.js›URLSearchParams connected to URL": "() => {\r\n    const url = new URL('http://www.example.com/?a=b,c');\r\n    const params = url.searchParams;\r\n\r\n    assert_equals(url.toString(), 'http://www.example.com/?a=b,c');\r\n    assert_equals(params.toString(), 'a=b%2Cc');\r\n\r\n    params.append('x', 'y');\r\n\r\n    assert_equals(url.toString(), 'http://www.example.com/?a=b%2Cc&x=y');\r\n    assert_equals(params.toString(), 'a=b%2Cc&x=y');\r\n}"
}